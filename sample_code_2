using System;
using System.Collections;
using System.Collections.Generic;
using GameUI.Options.MenuControllers;
using Photon.Pun;
using Photon.Realtime;
using Photon.Voice.Unity;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UI;
public class _PhotonConnect : Photon.Pun.MonoBehaviourPunCallbacks
{

    public string version_name = "0.1";
    public MainMenuController mm_control;
    public PlayMenuController pm_control;
    [SerializeField] Animator menuAnim;
    [SerializeField] Button joinGameBtn;

    // Use this for initialization
    void Start ()
    {
       
    }

    public void HandleReferences()
    {
        
        mm_control = FindObjectOfType<MainMenuController>();
        menuAnim = mm_control.menuAnim;
        pm_control = FindObjectOfType<PlayMenuController>();

    }
    
    // Update is called once per frame
    void Update ()
    {

    }

    public void ConnectToPhoton ()
    {
        if(!PhotonNetwork.IsConnected)
        {
            PhotonNetwork.ConnectUsingSettings();
            print("Connection to photon...");
        }
        else
        {
            mm_control.OnPlayMenuActivate();
        }
        menuAnim.SetBool ("ActivateFadeIn", true);
    }

    public override void OnConnectedToMaster ()
    {

        print ("We are connected to master");
        if(SceneManager.GetActiveScene().buildIndex == 0)
        {
            mm_control.OnPlayMenuActivate();
            JoinLobby();
        }

    }

    public void JoinLobby ()
    {
        print ("Joining lobby...");
        PhotonNetwork.JoinLobby (TypedLobby.Default);
    }

    public override void OnJoinedLobby ()
    {

        //join game button and host game button//
        print ("On Joined Lobby");

    }
    
    public void DisconnectFromPhoton ()
    {
        PhotonNetwork.Disconnect ();
    }

    public override void OnDisconnected (DisconnectCause cause)
    {
        print ("Disconnected from photon: " + cause);
        if (SceneManager.GetActiveScene ().buildIndex == 0)
        {
            //mm_control = GameObject.Find("MenuManager").GetComponent<MainMenuController>();
            //mm_control.BackToMainMenu();
        }
    }
    public override void OnRoomListUpdate (List<RoomInfo> roomList)
    {

        if (roomList.Count > 0)
        {

            Dictionary<string, string> matches = new Dictionary<string, string> ();
            foreach (RoomInfo roomInfo in roomList)
            {
                matches.Add (roomInfo.Name, roomInfo.PlayerCount + "/" + roomInfo.MaxPlayers);
            }
            pm_control.MakeMatchList (matches);
        }
    }

}



using System;
using System.Collections;
using System.Collections.Generic;
using GameUI.Options.MenuControllers;
using Photon.Pun;
using Photon.Realtime;
using Photon.Voice.Unity;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UI;
public class _PhotonConnect : Photon.Pun.MonoBehaviourPunCallbacks
{

    public string version_name = "0.1";
    public MainMenuController mm_control;
    public PlayMenuController pm_control;
    [SerializeField] Animator menuAnim;
    [SerializeField] Button joinGameBtn;

    // Use this for initialization
    void Start ()
    {
       
    }

    public void HandleReferences()
    {
        
        mm_control = FindObjectOfType<MainMenuController>();
        menuAnim = mm_control.menuAnim;
        pm_control = FindObjectOfType<PlayMenuController>();

    }
    
    // Update is called once per frame
    void Update ()
    {

    }

    public void ConnectToPhoton ()
    {
        if(!PhotonNetwork.IsConnected)
        {
            PhotonNetwork.ConnectUsingSettings();
            print("Connection to photon...");
        }
        else
        {
            mm_control.OnPlayMenuActivate();
        }
        menuAnim.SetBool ("ActivateFadeIn", true);
    }

    public override void OnConnectedToMaster ()
    {

        print ("We are connected to master");
        if(SceneManager.GetActiveScene().buildIndex == 0)
        {
            mm_control.OnPlayMenuActivate();
            JoinLobby();
        }

    }

    public void JoinLobby ()
    {
        print ("Joining lobby...");
        PhotonNetwork.JoinLobby (TypedLobby.Default);
    }

    public override void OnJoinedLobby ()
    {

        //join game button and host game button//
        print ("On Joined Lobby");

    }
    
    public void DisconnectFromPhoton ()
    {
        PhotonNetwork.Disconnect ();
    }

    public override void OnDisconnected (DisconnectCause cause)
    {
        print ("Disconnected from photon: " + cause);
        if (SceneManager.GetActiveScene ().buildIndex == 0)
        {
            //mm_control = GameObject.Find("MenuManager").GetComponent<MainMenuController>();
            //mm_control.BackToMainMenu();
        }
    }
    public override void OnRoomListUpdate (List<RoomInfo> roomList)
    {

        if (roomList.Count > 0)
        {

            Dictionary<string, string> matches = new Dictionary<string, string> ();
            foreach (RoomInfo roomInfo in roomList)
            {
                matches.Add (roomInfo.Name, roomInfo.PlayerCount + "/" + roomInfo.MaxPlayers);
            }
            pm_control.MakeMatchList (matches);
        }
    }

}



using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Photon.Pun;

public class _PlayerRPC : MonoBehaviour {

    PhotonView photonView;

    private void Start()
    {
        photonView = PhotonView.Get(this);
    }
    [PunRPC]
    public void HitEnemyMaster(int targetViewID)
    {
        PhotonView[] enemies = FindObjectsOfType<PhotonView>();
        foreach (PhotonView pw in enemies)
        {
            if (pw.ViewID == targetViewID)
            {
                pw.transform.GetComponent<MeshRenderer>().material.color = Color.red;
            }
        }
        photonView.RPC("HitEnemy", RpcTarget.OthersBuffered, (object)targetViewID);
    }

    [PunRPC]
    public void HitEnemy(int targetViewID)
    {
        PhotonView[] enemies = FindObjectsOfType<PhotonView>();
        foreach (PhotonView pw in enemies)
        {
            if (pw.ViewID == targetViewID)
            {
                pw.transform.GetComponent<MeshRenderer>().material.color = Color.red;
            }
        }
    }
}
