using UnityEngine;

public class Movement : MonoBehaviour
{
    //Public properties
    public Rigidbody rb;

    //Private properties
    private bool grounded = true;
    private bool attacked = false;
    private bool knocked = false;
    private string player_tag;
    private float input_attack;
    private float input_jump;
    private float turn_speed;
    private float temp_rot_y;
    private Vector2 input_move;
    private Vector3 look_vector;
    private Vector3 velocity;
    private Vector3 vel; //For SmoothDamp
    private AttackController ac;
   
    [SerializeField] private float moveSpeed = 3;
    [SerializeField] private float jumpForce = 5;

    // Start is called before the first frame update
    void Start()
    {
        player_tag = transform.tag;
        ac = transform.GetChild(0).GetChild(0).GetComponent<AttackController>();
        temp_rot_y = transform.localEulerAngles.y;
    }

    // Update is called once per frame
    void Update()
    {
        input_move = new Vector2(Input.GetAxisRaw(player_tag + "_Horizontal"), Input.GetAxisRaw(player_tag + "_Vertical"));
        input_attack = Input.GetAxisRaw(player_tag + "_attack");
        input_jump = Input.GetAxisRaw(player_tag + "_Jump");

        if(grounded)
        {
            moveSpeed = 3;
        }
        else if(grounded && moveSpeed > 0.02f)
        {
            moveSpeed -= 0.02f;
        }
    }
    private void FixedUpdate()
    {
        if(grounded)
        {
            rb.velocity = new Vector3(input_move.x * moveSpeed, rb.velocity.y, input_move.y * moveSpeed);
        }

        if (rb.velocity != Vector3.zero)
        {
            look_vector = Vector3.SmoothDamp(look_vector, new Vector3(rb.velocity.x, 0, rb.velocity.z), ref vel, 0.1f);
        }

        //If the player pressed the attack button.
        if (input_attack > 0 && !attacked)
        {
            attacked = true;
            ac.Attack();
        }
        else if(input_attack <= 0)
        {
            attacked = false;
        }

        //If the player pressed the jump button and is not on the ground.
        else if(input_jump > 0 && grounded)
        {
            grounded = false;
            print("Jump!");
            rb.AddForce(transform.up * jumpForce, ForceMode.Impulse);
        }
        
        transform.rotation = Quaternion.LookRotation(look_vector);
        //Calculate the player's turning speed
        if(transform.localEulerAngles.y > temp_rot_y)
        {
            temp_rot_y = temp_rot_y + 360f;
        }
    
        turn_speed = temp_rot_y - transform.localEulerAngles.y;
        temp_rot_y = transform.localEulerAngles.y;
        
    }

    private void OnCollisionEnter(Collision collision)
    {
        if (collision.transform.tag == "ground")
        {
            grounded = true;
        }
    }

    //Private methods:

    private void KnockMe(Vector3 dir)
    {
        grounded = false;
        rb.AddForce(dir, ForceMode.Impulse);
    }

    //Public methods:

    public void KnockPlayer(Vector3 dir)
    {
        KnockMe(dir);
    }

    public float GetAngularVelocity()
    {
        if(turn_speed > 300)
        {
            return 0f;
        }
        else
        {
            return turn_speed;
        }
    }

    public Vector3 GetVelocity()
    {
        return rb.velocity;
    }
}



using System.Collections;
using UnityEngine;

public class AttackController : MonoBehaviour
{
    //Private properties
    private bool attack = false;
    private bool attacking = false;
    private Mesh mesh;
    private Vector3 vertices;
    private Vector3 normals;
    private UI_Controller uc;
    private GameController gc;
    private Movement m;
    private ArmScript a;
    private Animator animator;
    private Transform player;

    [SerializeField] float force;

    // Start is called before the first frame update
    void Start()
    {
        player = transform.parent.parent.transform;
        mesh = GetComponent<MeshFilter>().mesh;
        animator = transform.parent.GetComponent<Animator>();
        uc = GameObject.FindObjectOfType<UI_Controller>();
        gc = GameObject.FindObjectOfType<GameController>();
        m = player.GetComponent<Movement>();
        a = transform.parent.GetComponent<ArmScript>();
    }
    
    private void FixedUpdate()
    {
        float player_turn_speed = m.GetAngularVelocity() / 5;
        float arm_turn_speed = a.GetAngularVelocity() / 5;
        force = arm_turn_speed + player_turn_speed;
        if (attack)
        {
            ShootRays();
        }
    }
    
    //Public methods

    public void Attack()
    {
        if(!animator.GetCurrentAnimatorStateInfo(0).IsName("Attack"))
        {
            attack = true;
            animator.SetBool("attacking", true);
            StartCoroutine(AttackCoroutine());
        }
    }

    //Private methods
    
    //Shoot raycasts from this GameObject
    private void ShootRays()
    {
        for (int i = 0; i < mesh.vertices.Length; i = i + 3)
        {
            RaycastHit hit;

            if (Physics.Raycast(transform.TransformPoint(mesh.vertices[i]), transform.TransformDirection(mesh.normals[i]), out hit, 0.2f))
            {
                if (hit.transform != transform.parent.parent && hit.transform.gameObject.layer == 9)
                {
                    Vector3 v = transform.TransformDirection(mesh.normals[i].x * force, force, mesh.normals[i].z * force);
                    gc.AddPoint(player.tag);
                    hit.transform.GetComponent<Movement>().KnockPlayer(v);
                    attack = false;
                    break;
                }
            }
        }
    }

    IEnumerator AttackCoroutine()
    {
        yield return new WaitForSeconds(0.3f);
        animator.SetBool("attacking", false);
        attack = false;
    }
}


using UnityEngine;
using UnityEngine.UI;

public class UI_Controller : MonoBehaviour
{
    //Private properties
    [SerializeField] Text p1_score_text;
    [SerializeField] Text p2_score_text;
    [SerializeField] Text winnerText;

    // Start is called before the first frame update
    void Start()
    {
        p1_score_text.text = "0";
        p2_score_text.text = "0";
    }

    //Public methods

    /// <summary>
    /// Update the score_text of player with tag "playerTag".
    /// </summary>
    /// <param name="playerTag"></param>
    /// <param name="score"></param>
    public void UpdateScore(string playerTag, int score)
    {
        if(playerTag == "p1")
        {
            p1_score_text.text = score.ToString();
        }
        else
        {
            p2_score_text.text = score.ToString();
        }
    }

    public void DisplayGameOverText(int winner)
    {
        winnerText.gameObject.SetActive(true);
        winnerText.text = "Player " + winner + " won";
    }
}



using System.Collections;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;

public class GameController : MonoBehaviour
{
    //Private properties
    private int p1_score;
    private int p2_score;
    private UI_Controller uc;
    private Text winnerText; 

    // Start is called before the first frame update
    void Start()
    {
        uc = GameObject.FindObjectOfType<UI_Controller>();
        winnerText = uc.transform.Find("winner").GetComponent<Text>();
    }

    // Update is called once per frame
    void Update()
    {
        if(p1_score == 10)
        {
            StartCoroutine("GameOver", (object)1);
        }
        else if(p2_score == 10)
        {
            StartCoroutine("GameOver", (object)2);

        }
    }

    //Public methods

    /// <summary>
    /// Add a point to the player with tag "playerTag".
    /// </summary>
    /// <param name="playerTag"></param>
    public void AddPoint(string playerTag)
    {
        if (playerTag == "p1")
        {
            p1_score++;
            uc.UpdateScore(playerTag, p1_score);
        }
        else
        {
            p2_score++;
            uc.UpdateScore(playerTag, p2_score);
        }
    }

    IEnumerator GameOver(int winner)
    {
        uc.DisplayGameOverText(winner);
        yield return new WaitForSeconds(3f);
        SceneManager.LoadScene(0);
    }
}



using UnityEngine;

public class CameraScript : MonoBehaviour
{
    //Private properties
    private Vector3 velPos;
    private Vector3 velRot;
    private Vector3 playersCenter;
    [SerializeField] Transform p1;
    [SerializeField] Transform p2;

    private void FixedUpdate()
    {
        //Calculates the center point of the players
        playersCenter = new Vector3((p1.position.x + p2.position.x) / 2, 0.25f, ((p1.position.z + p2.position.z) / 2));

        //Calculates the distance between the players
        float playersDistance = Mathf.Sqrt(Mathf.Pow((p1.position.x - p2.position.x), 2f) + Mathf.Pow((p1.position.y - p2.position.y), 2f) + Mathf.Pow((p1.position.z - p2.position.z), 2f)) / 14f;

        //Makes the camera follow the center point of the players
        this.transform.position = Vector3.SmoothDamp(
            this.transform.position,
            new Vector3(playersCenter.x, Mathf.Lerp(5f, 8f, playersDistance), Mathf.Lerp(playersCenter.z - 4f, playersCenter.z - 7f, playersDistance)),
            ref velPos,
            0.3f
            );

        //Rotates the camera so that it always shows all of the player on screen.
        this.transform.eulerAngles = Vector3.SmoothDamp(
            this.transform.eulerAngles,
            new Vector3(Mathf.Lerp(47f, 50f, playersDistance), 0, 0),
            ref velRot,
            0.3f
            );
    }
}

